##########################################

#1 INICIO DO FRONTEND

FIGMA FILE: https://www.figma.com/file/4weD0kpvvxxM6roojAzfPh/Saloon-Pro?type=design&node-id=0%3A1&mode=design&t=Sw48ZVKatGXrUH2g-1

RODAR NO FRONT: npm run dev

Iremos começar a criar nosso front usando next com o comando:

npx create-next-app@latest


Damos um nome para o nosso projeto: client

"Quando criar o App com Next vai pergutnar se deseja usar app router ai só respondeer NO"

Agora eliminamos a pasta styles e api

Apagamos tuto em nosso index.tsx

eliminamos o file _document e criamos um do 0

Agora importamos nossas fontes do google fontes

Criamos Heads dentro do Index.tsx

Importamos nossa logo dentro da pasta images



##########################################

#2 Instalando e Configurando CHAKRA-UI

Vamos ate esse link para instalaçao no NEXT: https://chakra-ui.com/getting-started/nextjs-pages-guide

Apos instalacao vamos configurar nosso provider do CHAKRA, basta envolver nosso _app.tsx dentro do chackra provider


##########################################

#3 Paginas de Login

Criamos dentro do nosso pages um folder "Login" e criamos nosso componente

Devemos seguir a estrutura do nosso FIGMA FILE

Para a construçao dos componentes é importante lermos a documentaçao do CHAKRA UI


##########################################

#4 Paginas de Cadastro

Criamos uma pasta Register e basicamente copiamos nossa pagina de LOGIN


##########################################

#5 Adicionado o concurrently

So seguir um tutorial do YT


##########################################

#6 CONTEXT API

Iremos globalizar nossas props para assim ter estado em toda nossa aplicaçao.

Iremos criar um contexto geral para nao acarretar em prop drilling.

Criamos uma pasta: context

Dentro dela criamos o nosso context para auth: AuthContext.tsx

Devemos mudar em nosso tsconfig.json (Em nosso FE) para nao originas um erro caso um valor seja inicializado como UNDEFINED

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,  //AQUI !!!

Feita essa mudança devemos parar de rodar o projeto e rodar denovo.

Agora que criamos nosso Context para definir um contexto de autenticação (AuthContext) que fornece informações sobre o usuário autenticado e seu status de autenticação para os componentes filhos. Ele utiliza o useState do React para armazenar as informações do usuário e determina se o usuário está autenticado com base nessas informações.

Iremos utilizar de fato nosso contexto em nossa aplicaçao, vamos envolver nossas paginas em nosso context.
Vamos ate o _app.tsx e adicionamos nosso provider.

Agora que passamos o PROVIDER para nosso _app.tsx devemos testar-lo

Vamos criar uma funçao de LOGIN so pra ver se os dados sao passados pro FE.

//*Algo interessante é que podemos criar funcoes em nosso CONTEXT API e passar como metodos para nosso componentes*\\


##########################################

#7 Configurando API

Iremos instalar axios + nookies + jwt-decode

npm i axios nookies jwt-decode

Criamos uma variavel de ambiente para nossa URL do APP

Criamos um file SERVICES no nosso FE que serve basicamente configuramos nossa base URL para as requisicoes e suas devidas tratativas de erros.

Criamos um file dentro da pasta services onde armazena possiveis erros e suas mensagens.

Agora passamos nosso service para nosso contexto

Criamos uma funçao de LOGOUT no AuthContext e passamos essa funçao para nosso api.ts em um caso de que o user deva ser jogado fora do app

Agora criamos um file apiClient, para quando iremos consumir nossa api do lado do client


##########################################

#8 CRIANDO FUNCIONALIDADE LOGIN

Apos configurar a parte inicial de nossa API vamos criar a funcionalidade de login

Primeiramente em nosso context chamamos no api.ts

e atualizamos nossa funçao de SignIn no AuthContext.ts

##########################################

#9 CRIANDO FUNCIONALIDADE REGISTER

Agora iremos criar a funcionalidade para registrar em nossa API.

Primeiramente vamos ate nosso CONTEXT e criamos nossa interface e funçao de register e logout.

Agora que criamos nossa funçao de logout e register e passamos para nosso contexto, vamos importar-lo e usar la em nosso componente REGISTER.


##########################################

#10 PROTEGENDO ROTAS

Iremos criar verificaçoes e dar acesso a rotas para usuarios que estao logados e restringir acesso para os que nao estao logados

Dentro a pasta utils criamos a pasta utils e o file canSSRAuth.ts

Agora que criamos nosso Utils de proteçao de rotas iremos utilizar-lo em paginas onde queremos que somente users autenticados entrem. Vamos importar no Dashboard


##########################################

#11 ROTAS LOGADAS

Caso o usuario esteja logado, ou seja que seria um GUEST ele nao ira ver certas rotas, como a de login e algumas outras.

Dentro de UTILS criamos o file canSSRGuest.ts

Apos criado passamos esse utils para a pagina de LOGIN

Devemos passar lo tambem para a rota register, pois nao queremos que um usuario logado possa ver a rota REGISTER

##########################################

#12 PERMANCER USER LOGADO   

Iremos em nosso context passar as propriedades do token em nosso useEffect para que o usuario permaneca logado em nossa app e tenha as suas propriedades acessiveis no useState no nossos app, para isso acessamos a rota /me do BE.

Fazemos tambem uma validaçao para saber se o token esta correto depois do user logado, caso nao esteja ele é mandado embora da nossa aplicaçao.

##########################################

#13 COMPONENTE SIDEBAR   

Criamos a pasta componentes e criamos outra pasta pro SIDEBAR
Instalamos icons:

npm i react-icons

Lendo a documentaçao do CHAKRA temos um componente chamado DRAWER, que seria a NAVBAR LATERAL

Apos ter criado nosso SIDEBAR importamos ele para nossa Dashboard e para paginas onde ele sera usado.

Agora iremos configurar ela para que desapareca no MOBILE

##########################################

#14 PAGINA PROFILE

Seguindo nosso FIGMA FILE, devemos construir a pagina "PROFILE"

Criamos nosso component dentro de pages > PROFILE
