/################# STRIPE #################\

Aqui iremos fazer o passo a passo para integrar nosso sistema com o GATEWAY STRIPE

#01 SETUP INICIAL

LOGAR NA CONTA DO STRIPE E SEGUIR PASSO A PASSO

Instalar no backend:

npm i stripe

Agora criamos um file dentro de UTILS: STRIPE.TS

Pegamos nossa APIKEY e colocamos no file: .env

Agora criamos dentro do nosso services o folder subscriptions

Agora criamos o controller subscription > SubController.ts

Por ultimo agora criamos nossa rota

##########################################

#02 CRIANDO ROTAS PAGAMENTOS

Agora criamos um produto dentro do stripe 

Apos criar o produto no catalogo, pegamos o id desse produto e setamos no file .ENV

Feito isso vamos construir a logica no nosso SubController

##########################################

#03 TESTANDO CHECKOUT

Vamos testar lo diretamente em nosso FE, mas pra isso devemos instalarlo em nosso FE o STRIPE

Pegamos nossa apiKey e colocamos no nosso .env.local do FE

Agora em nosso FE criamos dentro a pasta services um file stripe-js.ts que é a cofiguraçao do STRIPE no FE.

Posteriormente devemos criar nossa funçao para fazer o HANDLE ao clicar pra virar premium

##########################################

#04 WEBHOOKS

Aqui iremos tratar a logica no caso em que um pagamento da certo ou errado.

Oque é webhook? E quando o stripe ou outro gateway envia uma resposta para nosso software, ex: 

Usuario faz um pagamento no stripe (Mandamos um POST do nosso software) -----> 

STRIPE response com um POST para o nosso software falando oque houve, se deu certo ou nao.

Para testar localmente os WEBHOOKS, vamos simular localmente: 

Use a Stripe CLI para simular eventos da Stripe no seu ambiente local ou saiba mais sobre Webhooks.

https://docs.stripe.com/stripe-cli

Apos baixar o file EXE do stripe abrimos ele e entao vai abrir o terminal, dai executamos os seguintes comandos: 

stripe login

Agora vamos encaminhar eventos ao nosso webhook, pra fazer isso devemos criar uma nova rota.

dentro de controllers > subscription > WebhooksController.ts

Em nosso file .env criamos uma variavel STRIPE_WEBHOOK_SECRET para nosso endpoint de teste  (Esse endpoint vem fornecido aqui: )

https://dashboard.stripe.com/webhooks/create?endpoint_location=local

Agora criamos dentro do nosso controller nosso WEBHOOKS

Para nosso controller do webhooks nao iremos criar um servico na pasta services mas na pasta utils. manageSubs.ts

Dentro do manageSubs.ts iremos fazer todas as op de cadastrar no banco, atualizar e deletar assinatura do USER

Uma vez criado esse file manageSubs.ts, importamos ele para o WebhooksController.ts para fazer a gestao das assinaturas

Agora que criamos nosso file que ira gerenciar as subs vamos criar a rota!


Para testar nosso WEBHOOK devemos seguir os seguintes passos:

1° Abrir um novo terminal
2° Rodar comando: stripe listen --forward-to localhost:3333/webhooks (Que no caso é a rota webhooks do BE)
3° Rodar projeto e usar cartao de teste pra pagar: 4x "4242"
4° Ao finalizar a compra de teste o WEBHOOK envia as requisicoes feitas no TERMINAL


##########################################

#04 WEBHOOKS (FUNCAO CANCEL ASSINATURA)

Fizemos um teste de cancelar no stripe a assinatura para ver se o terminal com o webhook, app e DB respondem corretamente. E passou tudo corretamente nos testes.


##########################################

#05 WEBHOOKS (ALTERANDO ASSINATURA)

Vamos ate o STRIPE e vamos customizar no CHECKOUT o portal do nosso app.

Para isso iremos criar os controllers e services.

controller > subscription > CreatePortalController.ts
services > CreatePortalService.ts
routes > Nova rota inserida para o portal
