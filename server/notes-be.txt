/################# BACKEND #################\

rodar: 

npm run dev

#1 CONFIGURACAO INICIAL

COMMANDS USED:

npm init -y
npm install typescript --save-dev
npm i express
npm install @types/express --save-dev
npx tsc --init
npm i cors cookie-parser dotenv jsonwebtoken morgan nodemon bcrypt
npm i ts-node-dev typescript --save-dev   //Serve pro TS entender nossos imports


Agora vamos criar o script pra rodar nosso projeto:

  "scripts": {
    "dev": "ts-node-dev --transpile-only src/server.ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

Agora testamos nossas rotas e td funciona

##########################################

#2 TRATANDO ERROS DA API

Usar dep:

npm i express-async-errors

tratar no file server.ts os erros

Instalaçao e configuraçao do cors como typagem TS:
npm i @types/cors --save-dev

##########################################

#3 CONECTANDO AO DB

Agora iremos conectar o postgreSQL + BEEKEEPER + PRISMA

Rodamos o cmd no diretorio do project SERVER: 

npm install prisma --save-dev
npm i @prisma/client
npx prisma init

Mudar URL no file .env para a certa do postgreSQL e pronto conectou.

##########################################

#4 CRIANDO TABELAS

Vamos configurar o prisma, entao vamos criar uma pasta com nome prisma dentro do src

Depois devemos modelar nosso DB dentro do nosso SCHEMA que esta na cartella fora do src "prisma"

Vamos precisar de tabelas para:

- Cadastro de User 
- Endereço User
- Tabela para armazenar Serviços
- Tabela Clientes do User
- Tabela Relacionada entre SERVICE x CLIENTE
- Tabela Equipe do User

(Exemplo VISUAL das relacoes na aula: "CRIANDO TABELAS")

Agora vamos criar o modelo user em nosso schema.prisma na PASTA PRISMA

OBS: PARA IDENTIFICAR AS RELACOES NAS TABELAS BASTA OLHAR PARA O FIGMA E ENTENDER QUAIS AS RELACOES DENTRO DO APP

Feito os modelos devemos rodar um comando para rodar as relacoes das tabelas:

npx prisma migrate dev

Nome das tables: create_table

##########################################

#5 CRIANDO ESTRUTURA

Iremos criar nossa estrutura de controllers e services.
Lembre-se sempre de antes de construir alguma funcionalidade, olhar o figma file para visualizar quais funcionalidades o app pode precisar.

Controller (Controlador):

O que é: Imagine um controlador como um maestro em uma orquestra. Ele recebe pedidos (como uma música específica) e direciona os músicos para executar as ações necessárias.

Exemplo: Em um jogo, o controlador seria como um jogador que pressiona os botões para fazer o personagem se mover ou pular.

Services (Serviços):

O que são: Os serviços são como assistentes que realizam tarefas específicas. Eles são como pessoas especializadas em fazer algo muito bem.

Exemplo: Se pensarmos em uma biblioteca, o serviço seria como o bibliotecário que organiza os livros, ajuda as pessoas a encontrar o que precisam e verifica se os livros estão em bom estado.

****EXEMPLOS REAIS****

Como funcionam rotas, controllers e serviços?

o user acessa a rota e a rota vai chamar o controller que ira fazer alguma acao. Dentro do controller basicamente pegamos algo recebido pelo front como o body, auth, token, query params...

Dentro do controller chamamos um serviço para executar uma açao de acordo com oque pegamos do nosso front.

O serviço que se ocupa de manipular o DB, desde criar, atualizar, editar e deletar dentro do DB e devolver a informaçao pro controller se deu certo ou nao e o controller devolve pro usuario o via res.json o esito da operaçao.

##########################################

#6 CADASTRANDO USUARIOS NO DB

Agora iremos cadastrar os usuarios quando eles fizerem o registro em nosso form la no nosso DB

Para isso iremos chamar o nosso prisma client no services de USER (Que é ele que recebera os dados do controller e ira executar alguma açao.) e criar nossas verificacoes para criar o user.

Depois devemos instalar o bcrypt para encryptar a password.

npm i bcrypt
npm i --save-dev @types/bcrypt

Depois de fazer o hash da pwd e criar o user, iremos fazer um teste no nosso insomnia.

##########################################

#7 LOGANDO USUARIOS NO DB

Criamos un novo file que ira controlar quando o usuario se logar, AuthUserController.ts
E o servico que ira tratar do login no file AuthUserService.ts

Agora devemos configurar nossa rota de login


Devemos instalar os types do JWT:

npm i --save-dev @types/jsonwebtoken

Feito isso vamos no file .env e criamos nossa senha secreta que somente nos podemos ter acesso

(TODA VEZ QUE MEXER NO FILE .ENV LEMBRAR DE PARA O PROJETO E RODAR-LO NOVAMENTE)

Lembrar de mudar o strict true para FALSE para o TS ler as props globais dos files .env

Apos criar o service , controller e route. Devemos testar nossa rota no thunderbolt

##########################################

#8 CRIANDO MIDDLEWARES

O middleware ele inicia antes de qualquer coisa tanto como o controller ou service ele vai ser tipo o "GUARDA" que se algo nao tiver correto ira barrar o acesso a rota

Aqui criamos o service, controller e rota para pegar detalhes do usuario.

Porem antes de fazer o GET dessas informaçoes sensiveis do usuario, queremos criar um "validador/middleware" antes de chegar na rota para saber se o token é compativel com o usuario.

EXEMPLO:

Em nosso app vamos supor que um hacker tente pegar a rota e acessar-la, ele pode fazer isso caso a rota seja publica, caso seja privada sera impossivel, portanto vamos aprender a "Verificar users" antes deles puderem acessar a rota.

Criamos nosso primeiro middleware (isAuthenticated.ts)

Na criaçao é importante testar no thunderbolt pra saber se esta caindo nos condicionais, testamos nosso token com o bearer inserindo o token gerado no login e colocamos o prefixo "Bearer"

Criamos um file "types" que contem a tipagem sobreescrevendo a tipagem do express.

Devemos descomentar o typeRoots do tsconfig.json e colocar o path do nosso file @types pra que o typescript entenda nossa declaraçao do FILE.

##########################################

#9 ROTAS USER DETAILS

Aqui criamos a nossa rota onde ira pegar todos os detalhes do usuario


##########################################

#10 ROTA DE UPDATE USER

Olhando o figma file podemos ver que temos uma page "Minha Conta" que o usuario pode mudar suas informaçoes de contato.

Aqui criamos uma rota onde iremos fazer uma atualizacao dos dados do usuario.

-Primeiro começamos criando o service: UpdateUserService.ts

Criado esse file devemos criar o controller: UpdateUserController.ts

Por fim criamos nossa rota: router.put('/users', isAuthenticated, new UpdateUserController().handle)


