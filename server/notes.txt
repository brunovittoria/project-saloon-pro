/################# BACKEND #################\

rodar: 

npm run dev

#1 Configuraçao Inicial

COMMANDS USED:

npm init -y
npm install typescript --save-dev
npm i express
npm install @types/express --save-dev
npx tsc --init
npm i cors cookie-parser dotenv jsonwebtoken morgan nodemon bcrypt
npm i ts-node-dev typescript --save-dev   //Serve pro TS entender nossos imports


Agora vamos criar o script pra rodar nosso projeto:

  "scripts": {
    "dev": "ts-node-dev --transpile-only src/server.ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

Agora testamos nossas rotas e td funciona


#2 Tratando Erros da API

Usar dep:

npm i express-async-errors

tratar no file server.ts os erros

Instalaçao e configuraçao do cors como typagem TS:
npm i @types/cors --save-dev


#3 Conectando ao DB

Agora iremos conectar o postgreSQL + BEEKEEPER + PRISMA

Rodamos o cmd no diretorio do project SERVER: 

npm install prisma --save-dev
npm i @prisma/client
npx prisma init

Mudar URL no file .env para a certa do postgreSQL e pronto conectou.

#4 Criando Tabelas

Vamos configurar o prisma, entao vamos criar uma pasta com nome prisma dentro do src

Depois devemos modelar nosso DB dentro do nosso SCHEMA que esta na cartella fora do src "prisma"

Vamos precisar de tabelas para:

- Cadastro de User 
- Endereço User
- Tabela para armazenar Serviços
- Tabela Clientes do User
- Tabela Relacionada entre SERVICE x CLIENTE
- Tabela Equipe do User

(Exemplo VISUAL das relacoes na aula: "CRIANDO TABELAS")

Agora vamos criar o modelo user em nosso schema.prisma na PASTA PRISMA

OBS: PARA IDENTIFICAR AS RELACOES NAS TABELAS BASTA OLHAR PARA O FIGMA E ENTENDER QUAIS AS RELACOES DENTRO DO APP

Feito os modelos devemos rodar um comando para rodar as relacoes das tabelas:

npx prisma migrate dev

Nome das tables: create_table


#5 Criando Estrutura

Iremos criar nossa estrutura de controllers e services.

Controller (Controlador):

O que é: Imagine um controlador como um maestro em uma orquestra. Ele recebe pedidos (como uma música específica) e direciona os músicos para executar as ações necessárias.

Exemplo: Em um jogo, o controlador seria como um jogador que pressiona os botões para fazer o personagem se mover ou pular.

Services (Serviços):

O que são: Os serviços são como assistentes que realizam tarefas específicas. Eles são como pessoas especializadas em fazer algo muito bem.

Exemplo: Se pensarmos em uma biblioteca, o serviço seria como o bibliotecário que organiza os livros, ajuda as pessoas a encontrar o que precisam e verifica se os livros estão em bom estado.

****EXEMPLOS REAIS****

Como funcionam rotas, controllers e serviços?

o user acessa a rota e a rota vai chamar o controller que ira fazer alguma acao. Dentro do controller basicamente pegamos algo recebido pelo front como o body, auth, token, query params...

Dentro do controller chamamos um serviço para executar uma açao de acordo com oque pegamos do nosso front.

O serviço que se ocupa de manipular o DB, desde criar, atualizar, editar e deletar dentro do DB e devolver a informaçao pro controller se deu certo ou nao e o controller devolve pro usuario o via res.json o esito da operaçao.
